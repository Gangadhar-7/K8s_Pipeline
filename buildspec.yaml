version: 0.2
phases:
  install:
    commands:
      - echo "Install Phase- Amazon Linux Docker Image for CodeBuild which has all AWS Tools"
  pre_build:
      commands:
        # Docker Image Tag with Date Time & Code Buiild Resolved Source Version
        - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
        # Update Image tag in our Kubernetes Deployment Manifest        
        - sed -i 's@CONTAINER_IMAGE@'"$BACKEND_REPOSITORY_URI:$TAG"'@' kubernetes-manifests/backend-deployment.yaml
        - sed -i 's@CONTAINER_IMAGE@'"$FRONTEND_REPOSITORY_URI:$TAG"'@' kubernetes-manifests/frontend-deployment.yaml
        
        - echo "Login in to Amazon ECR..."
        - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $FRONTEND_REPOSITORY_URI
        # Update Kube config Home 
        - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      # Build Docker Images
      - echo "Build started on `date`"
      - echo "Building the Docker image..."
      - docker build --tag $BACKEND_REPOSITORY_URI:$TAG backend/
      - docker build --tag $FRONTEND_REPOSITORY_URI:$TAG frontend/
  post_build:
    commands:
      # Push Docker Image to ECR Repository
      - docker push $BACKEND_REPOSITORY_URI:$TAG
      - docker push $FRONTEND_REPOSITORY_URI:$TAG
      - echo "Docker Image Push to ECR Completed -  $BACKEND_REPOSITORY_URI:$TAG"    
      # Extracting AWS Credential Information using STS Assume Role for kubectl    
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Setup kubectl with our EKS Cluster               
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - kubectl version --client
      # Apply changes to our Application using kubectl          
      - kubectl apply -f kubernetes-manifests/
      - echo "Deployment-Successfull"                        
artifacts:
  files: 
    - build.json   
    - kube-manifests/*
